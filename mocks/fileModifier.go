// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AlecSmith96/dopbox/pkg/adapters (interfaces: FileModifier)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=../../mocks/fileModifier.go . FileModifier
//

// Package mock_adapters is a generated GoMock package.
package mock_adapters

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileModifier is a mock of FileModifier interface.
type MockFileModifier struct {
	ctrl     *gomock.Controller
	recorder *MockFileModifierMockRecorder
}

// MockFileModifierMockRecorder is the mock recorder for MockFileModifier.
type MockFileModifierMockRecorder struct {
	mock *MockFileModifier
}

// NewMockFileModifier creates a new mock instance.
func NewMockFileModifier(ctrl *gomock.Controller) *MockFileModifier {
	mock := &MockFileModifier{ctrl: ctrl}
	mock.recorder = &MockFileModifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileModifier) EXPECT() *MockFileModifierMockRecorder {
	return m.recorder
}

// CreateFile mocks base method.
func (m *MockFileModifier) CreateFile(arg0 string, arg1 []byte, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockFileModifierMockRecorder) CreateFile(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockFileModifier)(nil).CreateFile), arg0, arg1, arg2)
}

// DeleteFile mocks base method.
func (m *MockFileModifier) DeleteFile(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileModifierMockRecorder) DeleteFile(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileModifier)(nil).DeleteFile), arg0)
}

// RenameFile mocks base method.
func (m *MockFileModifier) RenameFile(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameFile indicates an expected call of RenameFile.
func (mr *MockFileModifierMockRecorder) RenameFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameFile", reflect.TypeOf((*MockFileModifier)(nil).RenameFile), arg0, arg1)
}

// UpdateFile mocks base method.
func (m *MockFileModifier) UpdateFile(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFile indicates an expected call of UpdateFile.
func (mr *MockFileModifierMockRecorder) UpdateFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFile", reflect.TypeOf((*MockFileModifier)(nil).UpdateFile), arg0, arg1)
}
