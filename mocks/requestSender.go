// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AlecSmith96/dopbox/pkg/adapters (interfaces: RequestSender)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=../../mocks/requestSender.go . RequestSender
//

// Package mock_adapters is a generated GoMock package.
package mock_adapters

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRequestSender is a mock of RequestSender interface.
type MockRequestSender struct {
	ctrl     *gomock.Controller
	recorder *MockRequestSenderMockRecorder
}

// MockRequestSenderMockRecorder is the mock recorder for MockRequestSender.
type MockRequestSenderMockRecorder struct {
	mock *MockRequestSender
}

// NewMockRequestSender creates a new mock instance.
func NewMockRequestSender(ctrl *gomock.Controller) *MockRequestSender {
	mock := &MockRequestSender{ctrl: ctrl}
	mock.recorder = &MockRequestSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestSender) EXPECT() *MockRequestSenderMockRecorder {
	return m.recorder
}

// SendCreateRequest mocks base method.
func (m *MockRequestSender) SendCreateRequest(arg0 string, arg1 []byte, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCreateRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCreateRequest indicates an expected call of SendCreateRequest.
func (mr *MockRequestSenderMockRecorder) SendCreateRequest(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCreateRequest", reflect.TypeOf((*MockRequestSender)(nil).SendCreateRequest), arg0, arg1, arg2)
}

// SendDeleteRequest mocks base method.
func (m *MockRequestSender) SendDeleteRequest(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDeleteRequest", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDeleteRequest indicates an expected call of SendDeleteRequest.
func (mr *MockRequestSenderMockRecorder) SendDeleteRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDeleteRequest", reflect.TypeOf((*MockRequestSender)(nil).SendDeleteRequest), arg0)
}

// SendRenameRequest mocks base method.
func (m *MockRequestSender) SendRenameRequest(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRenameRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendRenameRequest indicates an expected call of SendRenameRequest.
func (mr *MockRequestSenderMockRecorder) SendRenameRequest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRenameRequest", reflect.TypeOf((*MockRequestSender)(nil).SendRenameRequest), arg0, arg1)
}

// SendUpdateRequest mocks base method.
func (m *MockRequestSender) SendUpdateRequest(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendUpdateRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendUpdateRequest indicates an expected call of SendUpdateRequest.
func (mr *MockRequestSenderMockRecorder) SendUpdateRequest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUpdateRequest", reflect.TypeOf((*MockRequestSender)(nil).SendUpdateRequest), arg0, arg1)
}
